datatype LEXP =  APP of LEXP * LEXP | LAM of string *  LEXP |  ID of string;


(* checks whether a variable is free in a term *)
fun free id1 (ID id2) = if (id1 = id2) then  true else false|
    free id1 (APP(e1,e2))= (free id1 e1) orelse (free id1 e2) | 
    free id1 (LAM(id2, e1)) = if (id1 = id2) then false else (free id1 e1);
    
    
    
(* finds new variables which are fresh  in l and different from id*)
(* This is an improved version over the one provided*) 
fun findme id l = 
	if not (List.exists (fn x => id = x) l) then
		id
	else
		(findme (id^"'") l);
		

(* finds the list of free variables in a term *)
fun freeVars (ID id2)       = [id2]
  | freeVars (APP(e1,e2))   = freeVars e1 @ freeVars e2
  | freeVars (LAM(id2, e1)) = List.filter (fn x => not (x = id2)) (freeVars e1);
  
  
  
(*does substitution avoiding the capture of free variables*)
(* Substitute e for id in id1/(e1, e2)... *)

fun subs e id (ID id1) =  if id = id1 then e else (ID id1) |
    subs e id (APP(e1,e2)) = APP(subs e id e1, subs e id e2)|
    subs e id (LAM(id1,e1)) = (if id = id1 then LAM(id1,e1) else
                                   if (not (free id e1) orelse not (free id1 e)) then
										LAM(id1,subs e id e1)
                                   else 
										(let
											val id2 = (findme id ([id1]@ (freeVars e) @ (freeVars e1)))
										 in
											LAM(id2, subs e id (subs (ID id2) id1 e1)) 
										end));
					 
			
(* Print a term *)
					 
fun printLEXP (ID v) = print v
  | printLEXP (LAM (v,e)) =
		(print "(\206\187";
		print v;
		print ".";
		printLEXP e;
		print ")")
  | printLEXP (APP(e1,e2)) =
    (print "(";
     printLEXP e1;
     print " ";
     printLEXP e2;
     print ")");
     
fun is_var (ID id) =  true |
    is_var _ = false;
    

(*the function below adds lambda id to a list of terms *)
(* This binds the expressions in the list with [lambda]id *);
fun addlam id [] = [] |
    addlam id (e::l) = (LAM(id,e))::(addlam id l);
    
(*Applies all elements of a list to e2 *)
fun addbackapp [] e2 = []|
    addbackapp (e1::l) e2 = (APP(e1,e2)):: (addbackapp l e2);

(* Applies e1 to all elements in the list *)
fun addfrontapp e1 [] = []|
    addfrontapp e1  (e2::l) = (APP(e1,e2)):: (addfrontapp e1 l);
    
(*prints elements from a list putting an arrow in between*)
fun printlistreduce [] = ()|
    printlistreduce (e::[]) = (printLEXP e) |
    printlistreduce (e::l) = (printLEXP e; print "-->\n" ; (printlistreduce l));
    

(*Prints the number n, and then the list*)
fun debuglist n l = (print n; print ": "; printlistreduce l; print "\n");


(*Finds a beta redex*)
fun is_redex (APP(LAM(_,_),_)) =
      true
  | is_redex _ =
      false;

fun has_redex (ID id) = false |
    has_redex (LAM(id,e)) = has_redex e|
    has_redex (APP(e1,e2)) = if (is_redex  (APP(e1,e2))) then true else
                              ((has_redex e1) orelse (has_redex e2));

(*beta-reduces a redex*)
fun red (APP(LAM(id,e1),e2)) = subs e2 id e1;



(*reduces a term to normal form using the m-strategy in which the contracted redex is:
 m(AB) becomes the m-redex of A if m(A) has a redex
 m(AB) becomes m(B) if m(A) undefined (has no m-redex) and m(B) defined (has a m-redex)
 m(AB) becomes AB if m(A) undefined and m(B) undefined and AB is itself a redex
 m(AB) becomes undefined (If AB not a redex)
 m(\v.A) becomes the m-redex of A
 m(v) = undefined - it's a variable *)



fun mreduce (ID id) =  [(ID id)] | 
    mreduce (LAM(id,e)) = (addlam id (mreduce e)) |
    mreduce (APP(e1,e2)) = (
		let 
			val l1 = (mreduce e1)
			val l2 = (mreduce e2)
			val l3 = (addbackapp l1 e2)				
			val l4 = (addfrontapp (List.last l1) l2)
			val l5 = (List.last l4)
			val l6 =  if (is_redex l5) then (mreduce (red l5)) else [l5]
			    in l3 @ l4 @ l6
			    end);
			    
(*			    
fun reduce (ID id) = [(ID id)]
  | reduce (LAM(id, e)) = (addlam id (reduce e))
  | reduce (APP(e1, e2)) = 
		let 
			val l1 = (reduce e1)
			val l2 = (reduce e2)
			val l3 = (addbackapp l1 e2)				
			val l4 = (addfrontapp (List.last l1) l2)
			val l5 = (List.last l4)
		in
			if (has_redex e1) then l3@(reduce(List.last l3)) else 
			if (has_redex e2) then l4@(reduce(List.last l4)) else
			if (is_redex (APP(e1, e2))) then [APP(e1, e2)]@[red (APP(e1, e2))] else [(APP(e1, e2))]
		 end;
		 *);


(*printmreduce first m-reduces the term giving the list of all intermediary 
terms and then prints this list separating intermediary terms with -->*)

fun printmreduce e = printlistreduce (mreduce e);
    
    

(* One right reduction*)
fun  one_rireduce (ID id) = (ID id)|
    one_rireduce (LAM(id,e)) = LAM(id, (one_rireduce e))|
    one_rireduce (APP(e1,e2)) = if (has_redex e2) then (APP(e1, (one_rireduce e2))) else
                                if (is_redex (APP(e1,e2))) then (red (APP(e1,e2))) else
                                          if (has_redex e1) then (APP((one_rireduce e1), e2)) else
                                              (APP(e1,e2));


(* Right reduction*)
fun rireduce (ID id) =  [(ID id)] |
    rireduce (LAM(id,e)) = (addlam id (rireduce e)) |
    rireduce (APP(e1,e2)) = (let val l1 = (rireduce e2)
				val e3 = (List.last l1)
                                val l2 = (addfrontapp e1 l1)
				val e4 = (APP(e1,e3))
                                val l3 =  if (is_redex e4) then (rireduce (red e4)) else 
					  if is_var(e1) then [e4] else
					      (rireduce (APP(one_rireduce e1, e3)))
			    in l2 @ l3
                            end);


fun printrireduce e = (let val tmp =  (rireduce e)
		      in printlistreduce tmp end);


(* One Left reduction*)
fun one_loreduce (ID id) = (ID id)|
    one_loreduce (LAM(id,e)) = LAM(id, (one_loreduce e))|
    one_loreduce (APP(e1,e2)) = if (is_redex (APP(e1,e2))) then (red (APP(e1,e2))) else
                                 if (has_redex e1) then APP(one_loreduce e1, e2) else
                                 if (has_redex e2) then APP(e1, (one_loreduce e2)) else (APP(e1,e2));


(* Left reduction*)
fun loreduce (ID id) =  [(ID id)] |
    loreduce (LAM(id,e)) = (addlam id (loreduce e)) |
    loreduce (APP(e1,e2)) = (let val l1 = if (is_redex (APP(e1,e2))) then  (loreduce (red (APP(e1,e2)))) else 
				 if (has_redex e1) then (loreduce (APP(one_loreduce e1, e2))) else 
				 if (has_redex e2) then  (loreduce (APP(e1, (one_loreduce e2)))) else []
				 in [APP(e1,e2)]@l1
			      end);


fun printloreduce e = (let val tmp =  (loreduce e)
		      in printlistreduce tmp end);
